@page "/"
@rendermode InteractiveWebAssembly
@inject IRepository PizzaStore
@inject OrderState OrderState
@inject NavigationManager NavigationManager


<PageTitle>Cowabunga Pizza</PageTitle>

<div class="bkg-main">

	<img src="img/turtleMain.png"

		 class="img-fluid mainT-bkg"

			alt="a photo of TMNT, taped to the background, all of them are reaching for the pizza except for Raphael, who holds the no anchovies, cheesy pizza, away from his brothers, in jest." />

	
	<img src="img/turtlePower.png"
		 
		class="img-fluid subT-bkg"

			alt="TMNT 4 fists of unity, power, spirit, and pizza." />

</div>

<div class="main">
	<ul class="pizza-cards">
		@if (specials is not null)
		{
			@foreach (var special in specials)
			{
				<li @onclick="@(()=>OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
					<div class="pizza-info">
						<span class="title">@special.Name</span>
						@special.Description
						<span class="price">@special.GetFormattedBasePrice()</span>
					</div>
				</li>
			}
		}
	</ul>
</div>

<div class="sidebar">
	@if (OrderState.Order.Pizzas.Any())
	{
		<div class="order-contents">
			<h2>Your order</h2>

			@foreach (var configuredPizza in OrderState.Order.Pizzas)
			{
				<ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
			}
		</div>
	}
	else
	{
		<div class="empty-cart">Choose a pizza<br>to get started</div>
	}

	<div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
		Total:
		<span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
		<a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
			Order >
		</a>
	</div>
</div>

@if (OrderState.ShowingConfigureDialog)
{
	<ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
						  OnCancel="OrderState.CancelConfigurePizzaDialog"
						  OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code {
	List<PizzaSpecial>? specials;

	protected override async Task OnInitializedAsync()
	{
		specials = await PizzaStore.GetSpecials();
	}

}